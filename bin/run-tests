#!/bin/bash

function usage() {
    echo "USAGE"
    echo "  run-tests [OPTIONS...] [TESTS...]"
    echo ""
    echo "DESCRIPTION"
    echo "  runs the terraform test suite"
    echo ""
    echo "OPTIONS"
    echo "  -h, --help"
    echo "      show this message"
    echo ""
    echo "  -e PATTERN|FILE, --exclude PATTERN|FILE"
    echo "      repeatable option to exclude certain tests or test groups"
    echo ""
    echo "  -i PATTERN|FILE, --include PATTERN|FILE"
    echo "      repeatable option to include certain tests or test groups"
    echo ""
    echo "  -t, --tests-only"
    echo "      run the tests against an already running instance of moto"
}

export PROJECT_ROOT=$(pwd) # FIXME

export MOTO_DIR=${PROJECT_ROOT}/moto
export BUILD_DIR=${PROJECT_ROOT}/build

export MOTO_LOG=${BUILD_DIR}/moto.log
export TEST_LOG=${BUILD_DIR}/test.log

export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-test}
export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-test}

export INSTALL_LOCAL_MOTO=${INSTALL_LOCAL_MOTO:-true}

export TF_ACC=1
export TEST_PARALLEL=${TEST_PARALLEL:-1}

TEST_BIN=$HOME/.cache/moto/aws.test
[ ! -f $TEST_BIN ] && { echo "aws.test not installed. please run bin/install-aws-test"; exit 1; }

function run_moto() {
    cd ${MOTO_DIR}
    source .venv/bin/activate

    pip install .[server,all]

    exec python moto/server.py
}

function run_watchdog() {
    log="${BUILD_DIR}/tests/$1.log"

    while true; do
        sleep 1
        if grep --max-count=1 -q "attempt 1/25" ${log} &> /dev/null; then
            pkill -f "aws.test" # FIXME
            echo "[mtt.runner] terminated $1" | tee -a ${log}
            break
        fi
    done
}

function forward_moto_log() {
    trap 'kill $(jobs -p) 2> /dev/null' EXIT
    log=$1
    tail -f -n0 ${MOTO_LOG} 2> /dev/null | stdbuf -oL awk '{print "[mtt.moto] " $0}' | tee -a $log > /dev/null
}

function forward_test_log() {
    trap 'kill $(jobs -p) 2> /dev/null' EXIT
    log=$1
    tail -f -n0 ${TEST_LOG} 2> /dev/null | stdbuf -oL awk '{print "[mtt.gotest] " $0}' | tee -a $log > /dev/null
}

function run_test() {
    cd terraform-provider-aws/aws
    echo "running ${TEST_BIN} -test.v -test.parallel=${TEST_PARALLEL} -test.run $@"
    ${TEST_BIN} -test.v -test.parallel=${TEST_PARALLEL} -test.run "$@"
    return $?
}

function list_tests() {
    # without this function we could not run individual tests, but it's kinda hacky
    cmd=$PROJECT_ROOT/bin/list-tests
    args_all=""
    args=""

    # parse options
    while [[ "$#" -gt 0 ]]; do
        if [[ $2 =~ "_" ]]; then
            args_all="$args_all $1 $2"
        else
            args="$args $1 $2"
        fi
        shift
        shift
    done

    [ -z "$args" ] || $cmd $args
    [ -z "$args_all" ] || $cmd --all $args_all
}

function run_tests() {
    tests=$(list_tests "$@")

    if [ -z "${tests}" ]; then
        echo "no matching tests"
        exit 1
    fi

    # kill jobs once process exits
    trap 'kill $(jobs -p) 2> /dev/null' EXIT

    echo "" > ${TEST_LOG}

    tail -F ${TEST_LOG} 2> /dev/null | stdbuf -oL egrep "(=== RUN|=== CONT|=== PAUSE|FAIL|PASS|SKIP)" &

    export TF_LOG=debug

    for t in ${tests}; do
        # truncate test log
        echo "" > ${TEST_LOG}

        # touch log for test run
        log="${BUILD_DIR}/tests/${t}.log"
        echo "" > ${log}

        echo "[mtt.runner] starting $t" | tee -a ${log}

        run_watchdog $t &
        pid_watchdog=$!

        forward_moto_log $log &
        pid_forward_moto_log=$!

        forward_test_log $log &
        pid_forward_test_log=$!

        sleep 1

        if [[ $t =~ "_" ]]; then
            arg=$t
        else
            arg="${t}_"
        fi

        run_test "${arg}" 2>&1 | stdbuf -oL tee -a ${TEST_LOG} > /dev/null

        kill $pid_watchdog &> /dev/null
        kill $pid_forward_moto_log &> /dev/null
        kill $pid_forward_test_log &> /dev/null

        wait $pid_watchdog $pid_forward_test_log $pid_forward_moto_log
        echo "[mtt.runner] completed $t" | tee -a ${log}
        sleep 1

    done
}

function run_moto_and_tests() {
    rm -f ${MOTO_LOG}
    # start moto in the background
    DEBUG=1 run_moto &> ${MOTO_LOG} &
    export moto_pid=$!

    # TODO: subprocesses will stay open if interrupted

    # wait for moto to be ready
    echo "[mtt.runner] waiting on moto to start on process ${moto_pid}"

    while true; do
        sleep 1

        if `grep --max-count=1 -q "Running on" ${MOTO_LOG}`; then
            break
        fi
        if ! ps -p ${moto_pid} > /dev/null; then
            echo "[mtt.runner] moto terminated while waiting"
            exit 1
        fi
    done

    run_tests "$@"
    ret=$?

    # kill the running moto instance
    echo "[mtt.runner] killing moto ${moto_pid}"
    kill ${moto_pid}
    echo "[mtt.runner] waiting on moto to end"
    wait ${moto_pid}

    return ${ret}
}

function main() {
    list_test_args="" # test filters (handed to list-tests)
    start_moto=true

    while [[ "$#" -gt 0 ]]; do
        case $1 in
            -h|--help)        usage; exit 0 ;;
            -i|--include)     list_test_args="$list_test_args -i $2"; shift ;;
            -e|--exclude)     list_test_args="$list_test_args -e $2"; shift ;;
            -t|--tests-only)  start_moto=false; ;;
            *)                list_test_args="$list_test_args -i $1" ;;
        esac
        shift
    done

    mkdir -p ${BUILD_DIR}/tests

    if [ $start_moto == false ]; then
        run_tests $list_test_args
    else
        run_moto_and_tests $list_test_args
    fi

    exit $?
}

main "$@"
